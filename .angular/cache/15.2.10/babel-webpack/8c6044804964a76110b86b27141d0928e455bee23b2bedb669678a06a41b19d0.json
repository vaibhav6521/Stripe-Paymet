{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"ngx-qrcode2\";\nfunction UPIComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1, \" Payment successful! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UPIComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1, \" Payment failed! \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class UPIComponent {\n  constructor() {\n    this.paymentQRCode = 'YOUR_QR_CODE_DATA'; // Replace with your QR code data\n    this.paymentSuccess = false;\n    this.paymentFailure = false;\n  }\n  initiatePayment() {\n    // Simulated payment success/failure after scanning the QR code\n    setTimeout(() => {\n      const paymentSuccess = Math.random() < 0.8; // Simulating 80% success rate\n      this.handlePaymentResult(paymentSuccess);\n    }, 5000); // Simulating a delay - replace with actual success/failure handling logic\n  }\n\n  handlePaymentResult(success) {\n    if (success) {\n      this.paymentSuccess = true;\n      this.paymentFailure = false;\n    } else {\n      this.paymentSuccess = false;\n      this.paymentFailure = true;\n    }\n  }\n  static #_ = this.ɵfac = function UPIComponent_Factory(t) {\n    return new (t || UPIComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UPIComponent,\n    selectors: [[\"app-upi\"]],\n    decls: 6,\n    vars: 3,\n    consts: [[1, \"payment-container\"], [1, \"qr-code\", 3, \"qrc-element-type\"], [1, \"payment-button\", 3, \"click\"], [\"class\", \"success-message\", 4, \"ngIf\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"success-message\"], [1, \"error-message\"]],\n    template: function UPIComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"ngx-qrcode\", 1);\n        i0.ɵɵelementStart(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function UPIComponent_Template_button_click_2_listener() {\n          return ctx.initiatePayment();\n        });\n        i0.ɵɵtext(3, \"Scan QR Code to Pay\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, UPIComponent_div_4_Template, 2, 0, \"div\", 3);\n        i0.ɵɵtemplate(5, UPIComponent_div_5_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"qrc-element-type\", ctx.paymentQRCode);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.paymentSuccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.paymentFailure);\n      }\n    },\n    dependencies: [i1.NgIf, i2.QrcodeComponent],\n    styles: [\"[_nghost-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    height: 100vh;\\r\\n    font-family: Arial, sans-serif;\\r\\n  }\\r\\n  \\r\\n  button[_ngcontent-%COMP%] {\\r\\n    padding: 10px 20px;\\r\\n    font-size: 16px;\\r\\n    background-color: #007bff;\\r\\n    color: #fff;\\r\\n    border: none;\\r\\n    border-radius: 5px;\\r\\n    cursor: pointer;\\r\\n    transition: background-color 0.3s ease;\\r\\n    margin-top: 20px;\\r\\n  }\\r\\n  \\r\\n  button[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #0056b3;\\r\\n  }\\r\\n  \\r\\n  .success-message[_ngcontent-%COMP%], .error-message[_ngcontent-%COMP%] {\\r\\n    margin-top: 20px;\\r\\n    padding: 10px;\\r\\n    border-radius: 5px;\\r\\n    font-weight: bold;\\r\\n    text-align: center;\\r\\n    width: 200px;\\r\\n  }\\r\\n  \\r\\n  .success-message[_ngcontent-%COMP%] {\\r\\n    background-color: #28a745;\\r\\n    color: #fff;\\r\\n  }\\r\\n  \\r\\n  .error-message[_ngcontent-%COMP%] {\\r\\n    background-color: #dc3545;\\r\\n    color: #fff;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50L3VwaS91cGkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QixhQUFhO0lBQ2IsOEJBQThCO0VBQ2hDOztFQUVBO0lBQ0Usa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZix5QkFBeUI7SUFDekIsV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHNDQUFzQztJQUN0QyxnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0I7O0VBRUE7O0lBRUUsZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixZQUFZO0VBQ2Q7O0VBRUE7SUFDRSx5QkFBeUI7SUFDekIsV0FBVztFQUNiOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLFdBQVc7RUFDYiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgaGVpZ2h0OiAxMDB2aDtcclxuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcclxuICB9XHJcbiAgXHJcbiAgYnV0dG9uIHtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcyBlYXNlO1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgYnV0dG9uOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDU2YjM7XHJcbiAgfVxyXG4gIFxyXG4gIC5zdWNjZXNzLW1lc3NhZ2UsXHJcbiAgLmVycm9yLW1lc3NhZ2Uge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICB9XHJcbiAgXHJcbiAgLnN1Y2Nlc3MtbWVzc2FnZSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgfVxyXG4gIFxyXG4gIC5lcnJvci1tZXNzYWdlIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkYzM1NDU7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;IAIIA,8BAAoD;IAClDA,qCACF;IAAAA,iBAAM;;;;;IAENA,8BAAkD;IAChDA,iCACF;IAAAA,iBAAM;;;ACHV,OAAM,MAAOC,YAAY;EALzBC;IAOE,kBAAa,GAAW,mBAAmB,CAAC,CAAC;IAC7C,mBAAc,GAAY,KAAK;IAC/B,mBAAc,GAAY,KAAK;;EAE/BC,eAAe;IACb;IACAC,UAAU,CAAC,MAAK;MACd,MAAMC,cAAc,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;MAC5C,IAAI,CAACC,mBAAmB,CAACH,cAAc,CAAC;IAC1C,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ;;EAEAG,mBAAmB,CAACC,OAAgB;IAClC,IAAIA,OAAO,EAAE;MACX,IAAI,CAACJ,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACK,cAAc,GAAG,KAAK;KAC5B,MAAM;MACL,IAAI,CAACL,cAAc,GAAG,KAAK;MAC3B,IAAI,CAACK,cAAc,GAAG,IAAI;;EAE9B;EAAC;qBAtBUT,YAAY;EAAA;EAAA;UAAZA,YAAY;IAAAU;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDPzBf,8BAA+B;QAC3BA,gCAA4E;QAC5EA,iCAA2D;QAAnDA;UAAA,OAASgB,qBAAiB;QAAA,EAAC;QAAwBhB,mCAAmB;QAAAA,iBAAS;QAEvFA,6DAEM;QAENA,6DAEM;QACRA,iBAAM;;;QAVQA,eAAkC;QAAlCA,oDAAkC;QAGxCA,eAAoB;QAApBA,yCAAoB;QAIpBA,eAAoB;QAApBA,yCAAoB","names":["i0","UPIComponent","constructor","initiatePayment","setTimeout","paymentSuccess","Math","random","handlePaymentResult","success","paymentFailure","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Stripe\\Payments\\upi\\src\\app\\component\\upi\\upi.component.html","C:\\Stripe\\Payments\\upi\\src\\app\\component\\upi\\upi.component.ts"],"sourcesContent":["<div class=\"payment-container\">\n    <ngx-qrcode [qrc-element-type]=\"paymentQRCode\" class=\"qr-code\"></ngx-qrcode>\n    <button (click)=\"initiatePayment()\" class=\"payment-button\">Scan QR Code to Pay</button>\n  \n    <div *ngIf=\"paymentSuccess\" class=\"success-message\">\n      Payment successful!\n    </div>\n  \n    <div *ngIf=\"paymentFailure\" class=\"error-message\">\n      Payment failed!\n    </div>\n  </div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-upi',\n  templateUrl: './upi.component.html',\n  styleUrls: ['./upi.component.css']\n})\nexport class UPIComponent {\n\n  paymentQRCode: string = 'YOUR_QR_CODE_DATA'; // Replace with your QR code data\n  paymentSuccess: boolean = false;\n  paymentFailure: boolean = false;\n\n  initiatePayment() {\n    // Simulated payment success/failure after scanning the QR code\n    setTimeout(() => {\n      const paymentSuccess = Math.random() < 0.8; // Simulating 80% success rate\n      this.handlePaymentResult(paymentSuccess);\n    }, 5000); // Simulating a delay - replace with actual success/failure handling logic\n  }\n\n  handlePaymentResult(success: boolean) {\n    if (success) {\n      this.paymentSuccess = true;\n      this.paymentFailure = false;\n    } else {\n      this.paymentSuccess = false;\n      this.paymentFailure = true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}